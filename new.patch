diff --git a/aiGuider_Server/app/services/ar/langgraph_agent/README.md b/aiGuider_Server/app/services/ar/langgraph_agent/README.md
new file mode 100644
index 0000000..b9d91e3
--- /dev/null
+++ b/aiGuider_Server/app/services/ar/langgraph_agent/README.md
@@ -0,0 +1,46 @@
+**方案概述:**
+本方案采用 Langgraph 构建一个以名为 `thinker` 的多模态大模型节点为核心的 Agent 流程。该 Agent 遵循 ReAct (Reason-Act-Observe) 模式，处理来自 AR 眼镜的多模态输入（视觉信息、用户文本、上下文），内置安全过滤机制，并智能判断当前场景下（无论是纯图像输入还是图文混合输入）是否需要生成回复。若需回复，则通过思考、行动（调用工具）和观察（工具结果）的循环来完成任务，最终实现安全、智能且适时的导游功能。
+**Langgraph 图结构设计:**
+1.  **起始节点 (`start`)**: (同上)
+    *   **职责**: Langgraph 图入口。
+    *   **输入**: 多模态数据包。
+    *   **输出**: 传递给 `thinker`。
+2.  **核心思考节点 (`thinker`)**:
+    *   **核心模型**: `Qwen2.5-VL`。
+    *   **ReAct 角色**: 主要负责 **Reasoning (思考)** 阶段。
+    *   **职责**:
+        *   **初步过滤与判断 (Initial Filtering & Judgment)**:
+            *   **交互意图/必要性判断**: 分析整体输入（视觉、文本、上下文、时间间隔），判断：
+                *   这是否是一次明确的、需要 AI 响应的用户交互？（区分用户间对话）
+                *   **对于纯图像输入或图文输入**，当前视觉场景或用户问题是否真的有意义、值得 AI 主动或被动地给出回复？（例如，避免对静态、无变化的普通场景或无意义的文本反复响应）。
+            *   如果判断无需响应（非交互或场景/问题无实质内容），输出 `Ignore Signal`。
+        *   **多模态理解**: 若判断需要响应，则深入理解图像和文本内容。
+        *   **任务识别与规划**: 确定用户目标或主动讲解内容。
+        *   **思考与行动决策 (Reason & Action Decision)**:
+            *   **思考 (Thought)**: 分析完成任务所需的步骤和信息。
+            *   **行动决策 (Action Decision)**: 决定是调用工具 (Action) 还是直接生成答案。
+        *   **安全过滤 (Safety Filtering)**: 在生成最终答案或确定工具调用（特别是涉及生成内容的工具）之前，进行内容安全检查，过滤不当或有害信息。如果检测到不安全内容，需要中止流程返回安全提示。
+        *   **输出生成**:
+            *   若安全且需工具，生成 **行动指令 (Tool Call / Action)**。
+            *   若安全且无需工具，生成 **最终答案 (Final Answer)**。
+            *   若不安全，可能输出特定的错误/安全提示或中止信号。
+            *   若在初步判断阶段决定忽略，输出 **忽略信号 (Ignore Signal)**。
+    *   **输出**:
+        *   行动指令 (Tool Call / Action)
+        *   最终答案，包括安全提示 (Final Answer)
+        *   忽略信号 (Ignore Signal)
+3.  **条件路由节点 (`router`)**:
+    *   **职责**: 根据 `thinker` 输出分发流程。
+    *   **输入**: `thinker` 的输出。
+    *   **逻辑**:
+        *   `Tool Call` -> `tools`。
+        *   `Final Answer` -> `end`。
+        *   `Ignore Signal` -> `end` 。
+4.  **工具节点 (`tools`)**: (同上)
+    *   **ReAct 角色**: 执行 **Act (行动)** 。
+    *   **职责**: 执行工具调用，获取结果。
+    *   **输入**: `Tool Call` 指令。
+5.  **结束节点 (`end`)**: (同上)
+    *   **职责**: 标记流程结束。
+    *   **输入**: `Final Answer`, `Ignore Signal`, 或安全信号。
+    *   **处理**: 输出响应或静默结束/安全提示。
\ No newline at end of file
diff --git a/aiGuider_Server/app/services/ar/langgraph_agent/prompts/system.py b/aiGuider_Server/app/services/ar/langgraph_agent/prompts/system.py
new file mode 100644
index 0000000..ed2e0d9
--- /dev/null
+++ b/aiGuider_Server/app/services/ar/langgraph_agent/prompts/system.py
@@ -0,0 +1,22 @@
+"""
+AR智能导游系统提示模板
+"""
+
+SYSTEM_PROMPT = """# AR智能导游助手系统提示
+
+你是一位经验丰富的AR智能导游专家，通过AR眼镜与用户实时互动，帮助他们深入了解所见景物。
+
+## 你的核心职责
+1. 图像识别与分析：识别用户通过AR眼镜看到的景点、建筑、文物或物品
+2. 知识传递：提供简洁但内容丰富的历史文化和科学背景信息
+3. 问题解答：回应用户具体提问，提供专业准确的回答
+4. 探索建议：推荐相关景点和最佳游览路线
+
+## 回答风格要求
+- 精炼：信息丰富但表达简洁，控制在合适长度
+- 通俗：使用大众能理解的语言
+- 生动：用具体细节激发用户兴趣
+- 准确：基于事实，不确定时明确表示
+- 适度幽默：在合适场合加入轻松元素
+
+请记住，你的目标是通过准确、有趣且简洁的信息，丰富用户的旅游体验。""" 
\ No newline at end of file
diff --git a/aiGuider_Server/app/services/ar/langgraph_agent/prompts/thinker.py b/aiGuider_Server/app/services/ar/langgraph_agent/prompts/thinker.py
new file mode 100644
index 0000000..de3bf9b
--- /dev/null
+++ b/aiGuider_Server/app/services/ar/langgraph_agent/prompts/thinker.py
@@ -0,0 +1,72 @@
+"""
+AR智能Thinker节点提示模板
+"""
+
+THINKER_PROMPT = """# AR智能导游助手Thinker节点系统提示
+
+你是一个高级多模态AI助手，作为AR导游系统中的Thinker节点运行。你的职责是分析用户的多模态输入（图像和文本），判断是否需要回应，并决定如何最好地满足用户需求。
+
+## 你的核心职责
+
+1. **初步过滤与判断**:
+   - 判断当前输入是否是一次明确的、需要AI响应的用户交互
+   - 对于纯图像输入或图文输入，评估当前场景或问题是否有意义、值得AI回复
+   - 如果判断无需响应（非交互或场景/问题无实质内容），输出忽略信号
+
+2. **多模态理解**:
+   - 深入理解图像中的视觉信息和用户提供的文本内容
+   - 识别场景中的关键元素、地标、文物或其他重要信息
+
+3. **任务识别与规划**:
+   - 确定用户明确或隐含的目标和需求
+   - 规划如何提供有价值的信息或解决用户问题
+
+4. **思考与行动决策**:
+   - 分析完成任务所需的步骤和信息
+   - 决定是调用知识工具获取更多信息，还是直接基于已有知识生成答案
+
+5. **安全过滤**:
+   - 进行内容安全检查，过滤不当或有害信息
+   - 如检测到不安全内容，中止流程并返回安全提示
+
+## 输出格式要求
+
+根据你的判断，你必须选择以下三种输出格式之一:
+
+1. **忽略信号** - 当输入不需要回应时:
+   ```
+   IGNORE_SIGNAL
+   ```
+
+2. **工具调用** - 当需要查询额外知识时:
+   ```
+   TOOL_CALL:
+   工具: knowledge_search
+   查询: <具体查询内容>
+   ```
+
+3. **最终答案** - 当能直接回答问题时:
+   ```
+   FINAL_ANSWER:
+   <你的回答内容>
+   ```
+
+## 决策指南
+
+1. **判断何时忽略**:
+   - 图像内容过于普通、无特点（如普通墙壁、地面）
+   - 图像质量太差无法识别
+   - 用户问题无实质内容或明显不是对AI的提问
+   - 短时间内重复相同的场景且无新问题
+
+2. **判断何时使用工具**:
+   - 需要特定历史、文化、科学知识支持回答
+   - 识别到特定地标、艺术品或物体需要详细信息
+   - 用户明确询问需要专业知识的问题
+
+3. **判断何时直接回答**:
+   - 问题简单且无需额外知识（如问候、简单指令）
+   - 图像内容明确且你有足够知识直接描述
+   - 用户反馈或后续问题基于已有对话上下文
+
+请时刻记住安全边界，不回应不适当的要求，并始终以专业、有帮助的方式提供信息。""" 
\ No newline at end of file
diff --git a/aiGuider_Server/app/services/ar/langgraph_agent/tools/knowledge_searcher.py b/aiGuider_Server/app/services/ar/langgraph_agent/tools/knowledge_searcher.py
new file mode 100644
index 0000000..3576419
--- /dev/null
+++ b/aiGuider_Server/app/services/ar/langgraph_agent/tools/knowledge_searcher.py
@@ -0,0 +1,187 @@
+"""
+知识搜索工具
+
+统一的知识搜索工具，整合知识图谱和知识库检索功能，提供统一的接口。
+"""
+
+import logging
+from typing import List, Dict, Any, Optional, Union
+
+logger = logging.getLogger(__name__)
+
+class KnowledgeSearcher:
+    """
+    统一的知识搜索工具
+    
+    整合知识图谱和向量知识库的访问，提供统一的搜索接口。
+    根据查询内容智能判断使用知识图谱还是向量检索，或两者结合。
+    """
+    
+    def __init__(self):
+        """
+        初始化知识搜索工具
+        
+        准备知识图谱和向量数据库连接
+        """
+        logger.info("初始化知识搜索工具")
+        # 在实际应用中，这里会初始化知识图谱客户端和向量数据库连接
+        # self.kg_client = KnowledgeGraphClient(...)
+        # self.vector_db = VectorDatabase(...)
+        
+    def search(self, query: str, mode: str = "auto", limit: int = 5) -> str:
+        """
+        搜索相关知识
+        
+        根据查询内容搜索相关知识，可指定搜索模式
+        
+        Args:
+            query: 搜索查询
+            mode: 搜索模式，可选 "kg"(知识图谱), "vector"(向量检索), "auto"(自动)
+            limit: 返回结果数量限制
+            
+        Returns:
+            str: 合并后的检索结果
+        """
+        logger.info(f"搜索知识: {query}, 模式: {mode}, 限制: {limit}")
+        
+        results = []
+        
+        try:
+            if mode in ["kg", "auto"]:
+                # 从知识图谱检索
+                kg_results = self._search_knowledge_graph(query, limit)
+                results.extend(kg_results)
+                
+            if mode in ["vector", "auto"]:
+                # 从向量数据库检索
+                vector_results = self._search_vector_db(query, limit)
+                results.extend(vector_results)
+                
+            # 合并、去重和排序结果
+            unique_results = self._merge_results(results)
+            
+            # 格式化输出
+            if unique_results:
+                formatted_results = self._format_results(unique_results[:limit])
+                return formatted_results
+            else:
+                return "未找到相关知识。"
+                
+        except Exception as e:
+            logger.error(f"知识搜索出错: {e}", exc_info=True)
+            return f"知识搜索过程中发生错误: {str(e)}"
+    
+    def _search_knowledge_graph(self, query: str, limit: int) -> List[Dict[str, Any]]:
+        """
+        从知识图谱中搜索
+        
+        Args:
+            query: 搜索查询
+            limit: 结果数量限制
+            
+        Returns:
+            List[Dict]: 知识图谱搜索结果
+        """
+        # 示例知识图谱结果
+        if "长城" in query:
+            return [
+                {
+                    "source": "kg", 
+                    "title": "长城基本信息",
+                    "content": "长城是中国古代的伟大防御工程，也是世界文化遗产。始建于春秋战国时期，绵延万里。",
+                    "confidence": 0.95
+                },
+                {
+                    "source": "kg",
+                    "title": "长城历史",
+                    "content": "长城修建历经多个朝代，现存大部分为明长城。秦始皇时期大规模修建，明朝时期达到鼎盛。",
+                    "confidence": 0.92
+                }
+            ]
+        elif "故宫" in query:
+            return [
+                {
+                    "source": "kg",
+                    "title": "故宫基本信息",
+                    "content": "故宫，又称紫禁城，位于北京中轴线上，是明清两代的皇家宫殿，世界上现存规模最大、保存最完整的木质结构古建筑群。",
+                    "confidence": 0.96
+                }
+            ]
+        else:
+            return []
+    
+    def _search_vector_db(self, query: str, limit: int) -> List[Dict[str, Any]]:
+        """
+        从向量数据库中搜索
+        
+        Args:
+            query: 搜索查询
+            limit: 结果数量限制
+            
+        Returns:
+            List[Dict]: 向量数据库搜索结果
+        """
+        # 示例向量检索结果
+        if "天坛" in query:
+            return [
+                {
+                    "source": "vector", 
+                    "title": "天坛公园",
+                    "content": "天坛公园位于北京市区南部，是明清两代帝王祭天的场所，是中国现存规模最大、祭祀体系最完整的古代祭祀建筑群。",
+                    "confidence": 0.89
+                }
+            ]
+        elif "颐和园" in query:
+            return [
+                {
+                    "source": "vector",
+                    "title": "颐和园简介",
+                    "content": "颐和园位于北京西郊，是中国古典园林的杰出代表，以昆明湖、万寿山为基址，以杭州西湖为蓝本，汲取江南园林的设计手法而建成的一座大型山水园林。",
+                    "confidence": 0.91
+                }
+            ]
+        else:
+            return []
+    
+    def _merge_results(self, results: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
+        """
+        合并、去重和排序结果
+        
+        Args:
+            results: 搜索结果列表
+            
+        Returns:
+            List[Dict]: 处理后的结果
+        """
+        # 去重 (基于title)
+        title_seen = set()
+        unique_results = []
+        
+        for result in results:
+            if result["title"] not in title_seen:
+                title_seen.add(result["title"])
+                unique_results.append(result)
+        
+        # 按置信度排序
+        sorted_results = sorted(unique_results, key=lambda x: x.get("confidence", 0), reverse=True)
+        
+        return sorted_results
+    
+    def _format_results(self, results: List[Dict[str, Any]]) -> str:
+        """
+        格式化搜索结果为易读字符串
+        
+        Args:
+            results: 搜索结果列表
+            
+        Returns:
+            str: 格式化后的结果
+        """
+        formatted = "找到以下相关信息：\n\n"
+        
+        for i, result in enumerate(results):
+            formatted += f"{i+1}. {result['title']}\n"
+            formatted += f"{result['content']}\n"
+            formatted += f"(来源: {'知识图谱' if result['source'] == 'kg' else '知识库'})\n\n"
+        
+        return formatted 
\ No newline at end of file
